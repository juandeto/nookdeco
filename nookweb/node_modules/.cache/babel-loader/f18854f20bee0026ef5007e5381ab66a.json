{"ast":null,"code":"import * as actionTypes from './../actions/actionTypes';\nconst initialState = {\n  respaldo: {\n    formas: [{\n      tipo: 'Rectangular',\n      precio: 900,\n      select: false\n    }, {\n      tipo: 'Capilla',\n      precio: 900,\n      select: false\n    }, {\n      tipo: 'Oval',\n      precio: 900,\n      select: false\n    }, {\n      tipo: 'Esquinas Redondas',\n      precio: 900,\n      select: false\n    }],\n    medidas: [{\n      altura: 1.00,\n      ancho: 1.20,\n      precio: 9000,\n      select: false\n    }, {\n      altura: 1.40,\n      ancho: 1.20,\n      precio: 9500,\n      select: false\n    }, {\n      altura: 1.60,\n      ancho: 1.20,\n      precio: 9900,\n      select: false\n    }, {\n      altura: 1.80,\n      ancho: 1.20,\n      precio: 10900,\n      select: false\n    }, {\n      altura: 2.00,\n      ancho: 1.20,\n      precio: 11900,\n      select: false\n    }, {\n      altura: 2.20,\n      ancho: 1.20,\n      precio: 12900,\n      select: false\n    }],\n    generosycolores: [{\n      tipo: 'Lino Suizo',\n      color: null,\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Lino Paris',\n      color: null,\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Lino Costa',\n      color: null,\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Pana Dresden',\n      color: null,\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Pana Portugal',\n      color: null,\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Ecocuero',\n      color: null,\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Tussor Rayado',\n      color: null,\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Tussor Liso',\n      color: null,\n      select: false,\n      precio: 1000\n    }],\n    tachas: [{\n      tamanio: 'Tachas Grandes',\n      tipo: [{\n        tipo: Óxido,\n        select: false\n      }, {\n        tipo: Peltre,\n        select: false\n      }, {\n        tipo: Plateado,\n        select: false\n      }],\n      precio: 800,\n      select: false\n    }, {\n      tamanio: 'Tachas Medianas',\n      tipo: [{\n        tipo: Óxido,\n        select: false\n      }, {\n        tipo: Peltre,\n        select: false\n      }, {\n        tipo: Plateado,\n        select: false\n      }],\n      precio: 500,\n      select: false\n    }, {\n      tamanio: 'Sin Tachas',\n      tipo: [],\n      precio: 0,\n      select: false\n    }],\n    modelos: [{\n      tipo: 'Liso',\n      precio: 0,\n      select: false\n    }, {\n      tipo: 'Tacha Grande',\n      precio: 0,\n      select: false\n    }, {\n      tipo: 'Tacha Junta',\n      precio: 1000,\n      select: false\n    }, {\n      tipo: 'Doble Tacha',\n      precio: 900,\n      select: false\n    }, {\n      tipo: 'Botone',\n      precio: 1200,\n      select: false\n    }, {\n      tipo: 'Capitone',\n      precio: 5000,\n      select: false\n    }, {\n      tipo: 'Canelon',\n      precio: 8000,\n      select: false\n    }, {\n      tipo: 'Con Funda Lisa',\n      precio: 3250,\n      select: false\n    }]\n  },\n  precioRespaldo: 0\n}; // const newPrecio = (addPrice) => ({\n//         ...state.precioRespaldo, \n//          respaldoPrecio: state.precioRespaldo + addPrice\n//         });\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_FORMA:\n      let newFormas = [...state.respaldo.formas];\n\n      const selectFormas = () => newFormas.map(form => {\n        if (form.tipo === action.tipo) {\n          return { ...form,\n            select: true\n          };\n        } else {\n          return { ...form,\n            select: false\n          };\n        }\n      });\n\n      return { ...state,\n        respaldo: { ...state.respaldo,\n          formas: [...state.respaldo.formas, selectFormas()]\n        }\n      };\n\n    case actionTypes.SET_MEDIDAS:\n      let newMedidas = [...state.respaldo.medidas];\n\n      const selectMedidas = () => {\n        newMedidas.map(medida => {\n          if (medida.altura === action.altura && medida.ancho === action.ancho) {\n            return { ...medida,\n              select: true\n            };\n          } else {\n            return { ...medida,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        respaldo: { ...state.medidas,\n          medidas: [...state.medidas, selectMedidas()]\n        }\n      };\n\n    case actionTypes.SET_GENEROYCOLOR:\n      let newGenerosyColores = [...state.respaldo.generosycolores];\n\n      const selectGenerosyColores = () => {\n        newGenerosyColores.map(genero => {\n          if (genero.tipo === action.tipo) {\n            return { ...genero,\n              color: action.color,\n              select: true\n            };\n          } else {\n            return { ...genero,\n              color: null,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        respaldo: { ...state.respaldo,\n          generosycolores: [...state.respaldo.generosycolores, selectGenerosyColores()]\n        }\n      };\n\n    case actionTypes.SET_TACHA:\n      let newTachas = [...state.respaldo.tachas];\n\n      const selectTachas = () => {\n        newTachas.map(tacha => {\n          if (tacha.tamanio === action.tamanio) {\n            return { ...tacha,\n              tipo: action.tipo,\n              select: true\n            };\n          } else {\n            return { ...tacha,\n              tipo: null,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        respaldo: { ...state.respaldo,\n          tachas: [...state.respaldo.tachas, selectTachas()]\n        }\n      };\n\n    case actionTypes.SET_MODELO:\n      let newModelos = [...state.respaldo.modelos];\n\n      const selectModelo = () => {\n        newModelos.map(modelo => {\n          if (modelo.tipo === action.tipo) {\n            return { ...modelo,\n              select: true\n            };\n          } else {\n            return { ...modelo,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        respaldo: { ...state.respaldo,\n          modelos: [...state.respaldo.modelos, selectModelo()]\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Juan/Desktop/paginanook/nookweb/src/store/reducers/respaldo.js"],"names":["actionTypes","initialState","respaldo","formas","tipo","precio","select","medidas","altura","ancho","generosycolores","color","tachas","tamanio","Óxido","Peltre","Plateado","modelos","precioRespaldo","reducer","state","action","type","SET_FORMA","newFormas","selectFormas","map","form","SET_MEDIDAS","newMedidas","selectMedidas","medida","SET_GENEROYCOLOR","newGenerosyColores","selectGenerosyColores","genero","SET_TACHA","newTachas","selectTachas","tacha","SET_MODELO","newModelos","selectModelo","modelo"],"mappings":"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","sourcesContent":["import * as actionTypes from './../actions/actionTypes';\r\n\r\nconst initialState={\r\n    respaldo:{\r\n        formas:[\r\n            {\r\n                tipo: 'Rectangular',\r\n                precio: 900,\r\n                select: false\r\n            },\r\n            {\r\n                tipo: 'Capilla',\r\n                precio: 900,\r\n                select: false\r\n            },\r\n            {\r\n                tipo: 'Oval',\r\n                precio: 900,\r\n                select: false\r\n            },\r\n            {\r\n                tipo: 'Esquinas Redondas',\r\n                precio: 900,\r\n                select: false\r\n            },\r\n        ],\r\n   \r\n     medidas:[\r\n         {\r\n             altura: 1.00,\r\n             ancho: 1.20,\r\n             precio: 9000,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 1.40,\r\n             ancho: 1.20,\r\n             precio: 9500,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 1.60,\r\n             ancho: 1.20,\r\n             precio: 9900,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 1.80,\r\n             ancho: 1.20,\r\n             precio: 10900,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 2.00,\r\n             ancho: 1.20,\r\n             precio: 11900,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 2.20,\r\n             ancho: 1.20,\r\n             precio: 12900,\r\n             select: false\r\n          }\r\n     ],\r\n     generosycolores:[\r\n         {\r\n             tipo: 'Lino Suizo',\r\n             color: null,\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Lino Paris',\r\n             color: null,\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Lino Costa',\r\n             color: null,\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Pana Dresden',\r\n             color: null,\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Pana Portugal',\r\n             color: null,\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Ecocuero',\r\n             color: null,\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Tussor Rayado',\r\n             color: null,\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Tussor Liso',\r\n             color: null,\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n     ],\r\n     tachas:[\r\n         {\r\n             tamanio: 'Tachas Grandes',\r\n             tipo:[\r\n                 {\r\n                     tipo: Óxido,\r\n                     select: false\r\n                 },\r\n                 {\r\n                    tipo: Peltre,\r\n                    select: false\r\n                },\r\n                {\r\n                    tipo: Plateado,\r\n                    select: false\r\n                }\r\n             ],\r\n             precio: 800,\r\n             select: false\r\n         },\r\n         {\r\n             tamanio: 'Tachas Medianas',\r\n             tipo: [\r\n                {\r\n                    tipo: Óxido,\r\n                    select: false\r\n                },\r\n                {\r\n                   tipo: Peltre,\r\n                   select: false\r\n               },\r\n               {\r\n                   tipo: Plateado,\r\n                   select: false\r\n               }\r\n            ],\r\n             precio: 500,\r\n             select: false\r\n         },\r\n         {\r\n             tamanio: 'Sin Tachas',\r\n             tipo: [],\r\n             precio: 0,\r\n             select: false\r\n         },\r\n     ],\r\n     modelos:[\r\n         {\r\n             tipo: 'Liso',\r\n             precio: 0,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Tacha Grande',\r\n             precio: 0,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Tacha Junta',\r\n             precio: 1000,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Doble Tacha',\r\n             precio: 900,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Botone',\r\n             precio: 1200,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Capitone',\r\n             precio: 5000,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Canelon',\r\n             precio: 8000,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Con Funda Lisa',\r\n             precio: 3250,\r\n             select: false\r\n         }\r\n     ]\r\n    },\r\n    precioRespaldo: 0\r\n }\r\n\r\n// const newPrecio = (addPrice) => ({\r\n//         ...state.precioRespaldo, \r\n//          respaldoPrecio: state.precioRespaldo + addPrice\r\n//         });\r\n\r\n const reducer = (state=initialState, action) =>{\r\n    \r\n    switch (action.type) {\r\n      case actionTypes.SET_FORMA:\r\n      \r\n      let newFormas =[...state.respaldo.formas];\r\n      const selectFormas =() =>newFormas.map(form =>{\r\n              if(form.tipo === action.tipo){\r\n                  return {\r\n                    ...form,  \r\n                    select: true\r\n                }\r\n              }else{\r\n                return {\r\n                    ...form,  \r\n                    select: false\r\n                }\r\n              }\r\n          })\r\n\r\n            return{\r\n                ...state,\r\n                respaldo:{\r\n                    ...state.respaldo,\r\n                    formas:[\r\n                        ...state.respaldo.formas,\r\n                        selectFormas()\r\n                    ]\r\n                }\r\n            }\r\n      case actionTypes.SET_MEDIDAS:\r\n          let newMedidas=[...state.respaldo.medidas];\r\n         \r\n          const selectMedidas = () =>{\r\n              newMedidas.map(medida =>{\r\n                  if(medida.altura === action.altura && medida.ancho ===action.ancho){\r\n    \r\n                    return {\r\n                        ...medida,\r\n                        select: true\r\n                    }\r\n                     \r\n                  }else{\r\n                    return {\r\n                        ...medida,\r\n                        select: false\r\n                    }\r\n                  }\r\n              })\r\n          }\r\n                return{\r\n                    ...state,\r\n                    respaldo:{\r\n                        ...state.medidas,\r\n                        medidas:[\r\n                            ...state.medidas,\r\n                            selectMedidas()\r\n                        ]\r\n                    }\r\n                }\r\n     case actionTypes.SET_GENEROYCOLOR:\r\n         let newGenerosyColores =[...state.respaldo.generosycolores];\r\n         const selectGenerosyColores = () =>{\r\n             newGenerosyColores.map(genero =>{\r\n                 if(genero.tipo ===action.tipo){\r\n                     return {\r\n                        ...genero,\r\n                        color: action.color,\r\n                        select: true\r\n                    }\r\n                     \r\n                     \r\n                 }else{\r\n                    return{\r\n                        ...genero,\r\n                        color: null,\r\n                        select: false\r\n                    }\r\n                 }\r\n             })\r\n         }\r\n                    return{\r\n                        ...state,\r\n                        respaldo:{\r\n                            ...state.respaldo,\r\n                            generosycolores:[\r\n                                ...state.respaldo.generosycolores,\r\n                                selectGenerosyColores()\r\n                            ]\r\n                        }\r\n                    }\r\n      case actionTypes.SET_TACHA:\r\n          let newTachas=[...state.respaldo.tachas];\r\n          const selectTachas = () =>{\r\n              newTachas.map(tacha =>{\r\n                  if(tacha.tamanio === action.tamanio){\r\n                      return{\r\n                        ...tacha,\r\n                        tipo: action.tipo,\r\n                        select: true\r\n                    }\r\n\r\n                  }else{\r\n                    return{\r\n                        ...tacha,\r\n                        tipo: null,\r\n                        select: false\r\n                    }\r\n                  }\r\n              })\r\n          }\r\n                        return{\r\n                            ...state,\r\n                            respaldo:{\r\n                                ...state.respaldo,\r\n                                tachas:[\r\n                                    ...state.respaldo.tachas,\r\n                                    selectTachas()\r\n                                ]\r\n                            }\r\n                        }\r\n     case actionTypes.SET_MODELO:\r\n         let newModelos = [...state.respaldo.modelos];\r\n         const selectModelo = () => {\r\n             newModelos.map(modelo =>{\r\n                 if(modelo.tipo === action.tipo){\r\n                    return{\r\n                        ...modelo,\r\n                        select: true\r\n                    }\r\n                 }else{\r\n                    return{\r\n                        ...modelo,\r\n                        select: false\r\n                    }\r\n                 }\r\n             })\r\n         }\r\n                            return{\r\n                                ...state,\r\n                                respaldo:{\r\n                                    ...state.respaldo,\r\n                                    modelos:[\r\n                                        ...state.respaldo.modelos,\r\n                                        selectModelo()\r\n                                    ]\r\n                                }\r\n                            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n }\r\n\r\n export default reducer;"]},"metadata":{},"sourceType":"module"}