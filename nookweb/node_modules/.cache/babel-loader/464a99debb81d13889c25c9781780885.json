{"ast":null,"code":"import * as actionTypes from './../actions/actionTypes';\nconst initialState = {\n  respaldo: {\n    forma: '',\n    medida: {\n      ancho: null,\n      altura: null\n    },\n    genero: '',\n    color: '',\n    tacha: '',\n    tipoTacha: '',\n    modelo: ''\n  },\n  precioRespaldo: 0\n}; // const newPrecio = (addPrice) => ({\n//         ...state.precioRespaldo, \n//          respaldoPrecio: state.precioRespaldo + addPrice\n//         });\n\nconst reducer = (state = initialState, action) => {\n  console.log(state.precioRespaldo);\n\n  switch (action.type) {\n    case actionTypes.SET_FORMA:\n      return { ...state,\n        respaldo: { ...state.respaldo,\n          forma: action.tipo\n        },\n        precioRespaldo: state.precioRespaldo + action.precio\n      };\n\n    case actionTypes.SET_MEDIDAS:\n      let newMedidas = [...state.opciones.medidas];\n\n      const selectMedidas = () => {\n        return newMedidas.map(medida => {\n          if (medida.altura === action.altura && medida.ancho === action.ancho) {\n            return { ...medida,\n              select: true\n            };\n          } else {\n            return { ...medida,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          medidas: selectMedidas()\n        },\n        respaldo: { ...state.respaldo,\n          medida: {\n            ancho: action.ancho,\n            altura: action.altura\n          }\n        }\n      };\n\n    case actionTypes.SET_GENEROYCOLOR:\n      let newGenerosyColores = [...state.opciones.generosycolores];\n\n      const selectGenerosyColores = () => {\n        return newGenerosyColores.map(genero => {\n          if (genero.tipo === action.tipo) {\n            return { ...genero,\n              select: true\n            };\n          } else {\n            return { ...genero,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          generosycolores: selectGenerosyColores()\n        },\n        respaldo: { ...state.respaldo,\n          genero: action.tipo\n        }\n      };\n\n    case actionTypes.SET_COLOR:\n      return { ...state,\n        respaldo: { ...state.respaldo,\n          color: action.color\n        }\n      };\n\n    case actionTypes.SET_TACHA:\n      let newTachas = [...state.opciones.tachas];\n\n      const selectTachas = () => {\n        return newTachas.map(tacha => {\n          if (tacha.tamanio === action.tamanio) {\n            return { ...tacha,\n              select: true\n            };\n          } else {\n            return { ...tacha,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          tachas: selectTachas()\n        },\n        respaldo: { ...state.respaldo,\n          tipoTacha: action.tamanio\n        }\n      };\n\n    case actionTypes.SET_TIPO_TACHA:\n      let newTipoTachas = [...state.opciones.tachas];\n\n      const selectTipo = () => {\n        return newTipoTachas.map(tamanio => {\n          if (tamanio.select) {\n            return { ...tamanio,\n              tipo: tamanio.tipo.map(tipo => {\n                if (tipo.tipo === action.tipo) {\n                  return { ...tipo,\n                    select: true\n                  };\n                } else {\n                  return { ...tipo,\n                    select: false\n                  };\n                }\n              })\n            };\n          } else {\n            return { ...tamanio\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          tachas: selectTipo()\n        },\n        respaldo: { ...state.respaldo,\n          tipoTacha: action.tipo\n        }\n      };\n\n    case actionTypes.SET_MODELO:\n      console.log(state.opciones.modelo);\n      let newModelos = [...state.opciones.modelos];\n\n      const selectModelo = () => {\n        return newModelos.map(modelo => {\n          if (modelo.tipo === action.tipo) {\n            return { ...modelo,\n              select: true\n            };\n          } else {\n            return { ...modelo,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          modelos: selectModelo()\n        },\n        respaldo: { ...state.respaldo,\n          modelo: action.tipo\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Juan/Desktop/paginanook/nookweb/src/store/reducers/respaldo.js"],"names":["actionTypes","initialState","respaldo","forma","medida","ancho","altura","genero","color","tacha","tipoTacha","modelo","precioRespaldo","reducer","state","action","console","log","type","SET_FORMA","tipo","precio","SET_MEDIDAS","newMedidas","opciones","medidas","selectMedidas","map","select","SET_GENEROYCOLOR","newGenerosyColores","generosycolores","selectGenerosyColores","SET_COLOR","SET_TACHA","newTachas","tachas","selectTachas","tamanio","SET_TIPO_TACHA","newTipoTachas","selectTipo","SET_MODELO","newModelos","modelos","selectModelo"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,0BAA7B;AAEA,MAAMC,YAAY,GAAC;AACfC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,MAAM,EAAC;AACHC,MAAAA,KAAK,EAAE,IADJ;AAEHC,MAAAA,MAAM,EAAE;AAFL,KAFF;AAMLC,IAAAA,MAAM,EAAC,EANF;AAOLC,IAAAA,KAAK,EAAE,EAPF;AAQLC,IAAAA,KAAK,EAAC,EARD;AASLC,IAAAA,SAAS,EAAC,EATL;AAULC,IAAAA,MAAM,EAAC;AAVF,GADM;AAafC,EAAAA,cAAc,EAAE;AAbD,CAAnB,C,CAgBA;AACA;AACA;AACA;;AAIC,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACb,YAAP,EAAqBc,MAArB,KAA+B;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACF,cAAlB;;AACA,UAAQG,MAAM,CAACG,IAAf;AACE,SAAKlB,WAAW,CAACmB,SAAjB;AAEM,aAAM,EACF,GAAGL,KADD;AAEFZ,QAAAA,QAAQ,EAAE,EACN,GAAGY,KAAK,CAACZ,QADH;AAENC,UAAAA,KAAK,EAAEY,MAAM,CAACK;AAFR,SAFR;AAMFR,QAAAA,cAAc,EAAEE,KAAK,CAACF,cAAN,GAAuBG,MAAM,CAACM;AAN5C,OAAN;;AAQN,SAAKrB,WAAW,CAACsB,WAAjB;AAEI,UAAIC,UAAU,GAAC,CAAC,GAAGT,KAAK,CAACU,QAAN,CAAeC,OAAnB,CAAf;;AAEA,YAAMC,aAAa,GAAG,MAAK;AACvB,eAAOH,UAAU,CAACI,GAAX,CAAevB,MAAM,IAAG;AAC3B,cAAGA,MAAM,CAACE,MAAP,KAAkBS,MAAM,CAACT,MAAzB,IAAmCF,MAAM,CAACC,KAAP,KAAgBU,MAAM,CAACV,KAA7D,EAAmE;AACjE,mBAAO,EACH,GAAGD,MADA;AAEHwB,cAAAA,MAAM,EAAE;AAFL,aAAP;AAKD,WAND,MAMK;AACH,mBAAO,EACH,GAAGxB,MADA;AAEHwB,cAAAA,MAAM,EAAE;AAFL,aAAP;AAID;AACJ,SAbM,CAAP;AAcH,OAfD;;AAiBM,aAAM,EACF,GAAGd,KADD;AAEFU,QAAAA,QAAQ,EAAC,EACL,GAAGV,KAAK,CAACU,QADJ;AAELC,UAAAA,OAAO,EAAEC,aAAa;AAFjB,SAFP;AAOFxB,QAAAA,QAAQ,EAAE,EACN,GAAGY,KAAK,CAACZ,QADH;AAENE,UAAAA,MAAM,EAAC;AACHC,YAAAA,KAAK,EAAEU,MAAM,CAACV,KADX;AAEHC,YAAAA,MAAM,EAAES,MAAM,CAACT;AAFZ;AAFD;AAPR,OAAN;;AAeX,SAAKN,WAAW,CAAC6B,gBAAjB;AACI,UAAIC,kBAAkB,GAAE,CAAC,GAAGhB,KAAK,CAACU,QAAN,CAAeO,eAAnB,CAAxB;;AACA,YAAMC,qBAAqB,GAAG,MAAK;AAC/B,eAAOF,kBAAkB,CAACH,GAAnB,CAAuBpB,MAAM,IAAG;AACnC,cAAGA,MAAM,CAACa,IAAP,KAAeL,MAAM,CAACK,IAAzB,EAA8B;AAE1B,mBAAO,EACJ,GAAGb,MADC;AAEJqB,cAAAA,MAAM,EAAE;AAFJ,aAAP;AAMH,WARD,MAQK;AAEF,mBAAM,EACF,GAAGrB,MADD;AAEFqB,cAAAA,MAAM,EAAE;AAFN,aAAN;AAIF;AACJ,SAhBM,CAAP;AAiBH,OAlBD;;AAoBW,aAAM,EACF,GAAGd,KADD;AAEFU,QAAAA,QAAQ,EAAC,EACL,GAAGV,KAAK,CAACU,QADJ;AAELO,UAAAA,eAAe,EAACC,qBAAqB;AAFhC,SAFP;AAOF9B,QAAAA,QAAQ,EAAC,EACL,GAAGY,KAAK,CAACZ,QADJ;AAELK,UAAAA,MAAM,EAAEQ,MAAM,CAACK;AAFV;AAPP,OAAN;;AAYd,SAAKpB,WAAW,CAACiC,SAAjB;AACI,aAAM,EACF,GAAGnB,KADD;AAEFZ,QAAAA,QAAQ,EAAC,EACL,GAAGY,KAAK,CAACZ,QADJ;AAELM,UAAAA,KAAK,EAAEO,MAAM,CAACP;AAFT;AAFP,OAAN;;AAOJ,SAAKR,WAAW,CAACkC,SAAjB;AACI,UAAIC,SAAS,GAAC,CAAC,GAAGrB,KAAK,CAACU,QAAN,CAAeY,MAAnB,CAAd;;AAEA,YAAMC,YAAY,GAAG,MAAK;AACvB,eAAOF,SAAS,CAACR,GAAV,CAAclB,KAAK,IAAG;AACxB,cAAGA,KAAK,CAAC6B,OAAN,KAAkBvB,MAAM,CAACuB,OAA5B,EAAoC;AAChC,mBAAM,EACJ,GAAG7B,KADC;AAEJmB,cAAAA,MAAM,EAAE;AAFJ,aAAN;AAKH,WAND,MAMK;AACH,mBAAM,EACF,GAAGnB,KADD;AAEFmB,cAAAA,MAAM,EAAE;AAFN,aAAN;AAID;AACJ,SAbK,CAAP;AAcF,OAfD;;AAiBc,aAAM,EACF,GAAGd,KADD;AAEFU,QAAAA,QAAQ,EAAC,EACL,GAAGV,KAAK,CAACU,QADJ;AAELY,UAAAA,MAAM,EAACC,YAAY;AAFd,SAFP;AAOFnC,QAAAA,QAAQ,EAAE,EACN,GAAGY,KAAK,CAACZ,QADH;AAENQ,UAAAA,SAAS,EAAEK,MAAM,CAACuB;AAFZ;AAPR,OAAN;;AAYlB,SAAKtC,WAAW,CAACuC,cAAjB;AACsB,UAAIC,aAAa,GAAC,CAAC,GAAG1B,KAAK,CAACU,QAAN,CAAeY,MAAnB,CAAlB;;AAEA,YAAMK,UAAU,GAAG,MAAK;AACpB,eAAOD,aAAa,CAACb,GAAd,CAAkBW,OAAO,IAAG;AAC/B,cAAGA,OAAO,CAACV,MAAX,EAAkB;AACd,mBAAM,EACF,GAAGU,OADD;AAEFlB,cAAAA,IAAI,EAAEkB,OAAO,CAAClB,IAAR,CAAaO,GAAb,CAAiBP,IAAI,IAAE;AAEzB,oBAAGA,IAAI,CAACA,IAAL,KAAcL,MAAM,CAACK,IAAxB,EAA6B;AACzB,yBAAM,EACF,GAAGA,IADD;AAEFQ,oBAAAA,MAAM,EAAE;AAFN,mBAAN;AAIH,iBALD,MAKK;AACD,yBAAM,EACF,GAAGR,IADD;AAEFQ,oBAAAA,MAAM,EAAE;AAFN,mBAAN;AAIH;AACJ,eAbK;AAFJ,aAAN;AAmBH,WApBD,MAoBK;AACD,mBAAM,EACF,GAAGU;AADD,aAAN;AAGH;AACJ,SA1BM,CAAP;AA2BH,OA5BD;;AA6BA,aAAO,EACH,GAAGxB,KADA;AAEHU,QAAAA,QAAQ,EAAC,EACL,GAAGV,KAAK,CAACU,QADJ;AAELY,UAAAA,MAAM,EAAEK,UAAU;AAFb,SAFN;AAOHvC,QAAAA,QAAQ,EAAE,EACN,GAAGY,KAAK,CAACZ,QADH;AAENQ,UAAAA,SAAS,EAAEK,MAAM,CAACK;AAFZ;AAPP,OAAP;;AAYvB,SAAKpB,WAAW,CAAC0C,UAAjB;AACI1B,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACU,QAAN,CAAeb,MAA3B;AACA,UAAIgC,UAAU,GAAG,CAAC,GAAG7B,KAAK,CAACU,QAAN,CAAeoB,OAAnB,CAAjB;;AACA,YAAMC,YAAY,GAAG,MAAM;AACvB,eAAOF,UAAU,CAAChB,GAAX,CAAehB,MAAM,IAAG;AAC3B,cAAGA,MAAM,CAACS,IAAP,KAAgBL,MAAM,CAACK,IAA1B,EAA+B;AAC5B,mBAAM,EACF,GAAGT,MADD;AAEFiB,cAAAA,MAAM,EAAE;AAFN,aAAN;AAIF,WALD,MAKK;AACF,mBAAM,EACF,GAAGjB,MADD;AAEFiB,cAAAA,MAAM,EAAE;AAFN,aAAN;AAIF;AACJ,SAZM,CAAP;AAaH,OAdD;;AAemB,aAAM,EACF,GAAGd,KADD;AAEFU,QAAAA,QAAQ,EAAC,EACL,GAAGV,KAAK,CAACU,QADJ;AAELoB,UAAAA,OAAO,EAACC,YAAY;AAFf,SAFP;AAOF3C,QAAAA,QAAQ,EAAE,EACN,GAAGY,KAAK,CAACZ,QADH;AAENS,UAAAA,MAAM,EAAEI,MAAM,CAACK;AAFT;AAPR,OAAN;;AAapB;AACI,aAAON,KAAP;AArMR;AAuMF,CAzMD;;AA2MA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from './../actions/actionTypes';\r\n\r\nconst initialState={\r\n    respaldo:{\r\n        forma: '',\r\n        medida:{\r\n            ancho: null,\r\n            altura: null\r\n        },\r\n        genero:'',\r\n        color: '',\r\n        tacha:'',\r\n        tipoTacha:'',\r\n        modelo:''\r\n    },\r\n    precioRespaldo: 0\r\n }\r\n\r\n// const newPrecio = (addPrice) => ({\r\n//         ...state.precioRespaldo, \r\n//          respaldoPrecio: state.precioRespaldo + addPrice\r\n//         });\r\n\r\n\r\n\r\n const reducer = (state=initialState, action) =>{\r\n    console.log(state.precioRespaldo);\r\n    switch (action.type) {\r\n      case actionTypes.SET_FORMA:\r\n \r\n            return{\r\n                ...state,\r\n                respaldo: {\r\n                    ...state.respaldo,\r\n                    forma: action.tipo\r\n                },\r\n                precioRespaldo: state.precioRespaldo + action.precio\r\n            }\r\n      case actionTypes.SET_MEDIDAS:\r\n\r\n          let newMedidas=[...state.opciones.medidas];\r\n\r\n          const selectMedidas = () =>{\r\n              return newMedidas.map(medida =>{\r\n                  if(medida.altura === action.altura && medida.ancho ===action.ancho){\r\n                    return {\r\n                        ...medida,\r\n                        select: true\r\n                    }\r\n                     \r\n                  }else{\r\n                    return {\r\n                        ...medida,\r\n                        select: false\r\n                    }\r\n                  }\r\n              })\r\n          }\r\n          \r\n                return{\r\n                    ...state,\r\n                    opciones:{\r\n                        ...state.opciones,\r\n                        medidas: selectMedidas()\r\n                        \r\n                    },\r\n                    respaldo: {\r\n                        ...state.respaldo,\r\n                        medida:{\r\n                            ancho: action.ancho,\r\n                            altura: action.altura\r\n                        }\r\n                    }\r\n                }\r\n     case actionTypes.SET_GENEROYCOLOR:\r\n         let newGenerosyColores =[...state.opciones.generosycolores];\r\n         const selectGenerosyColores = () =>{\r\n             return newGenerosyColores.map(genero =>{\r\n                 if(genero.tipo ===action.tipo){\r\n                     \r\n                     return {\r\n                        ...genero,\r\n                        select: true\r\n                    }\r\n                     \r\n                     \r\n                 }else{\r\n                    \r\n                    return{\r\n                        ...genero,\r\n                        select: false\r\n                    }\r\n                 }\r\n             });\r\n         }\r\n    \r\n                    return{\r\n                        ...state,\r\n                        opciones:{\r\n                            ...state.opciones,\r\n                            generosycolores:selectGenerosyColores()\r\n                            \r\n                        },\r\n                        respaldo:{\r\n                            ...state.respaldo,\r\n                            genero: action.tipo\r\n                        }\r\n                    }\r\n      case actionTypes.SET_COLOR:\r\n          return{\r\n              ...state,\r\n              respaldo:{\r\n                  ...state.respaldo,\r\n                  color: action.color\r\n              }\r\n          }\r\n      case actionTypes.SET_TACHA:\r\n          let newTachas=[...state.opciones.tachas];\r\n          \r\n          const selectTachas = () =>{\r\n             return newTachas.map(tacha =>{\r\n                  if(tacha.tamanio === action.tamanio){\r\n                      return{\r\n                        ...tacha,\r\n                        select: true\r\n                    }\r\n\r\n                  }else{\r\n                    return{\r\n                        ...tacha,\r\n                        select: false\r\n                    }\r\n                  }\r\n              })\r\n          }\r\n          \r\n                        return{\r\n                            ...state,\r\n                            opciones:{\r\n                                ...state.opciones,\r\n                                tachas:selectTachas()\r\n                                \r\n                            },\r\n                            respaldo: {\r\n                                ...state.respaldo,\r\n                                tipoTacha: action.tamanio\r\n                            }\r\n                        }\r\n      case actionTypes.SET_TIPO_TACHA:\r\n                            let newTipoTachas=[...state.opciones.tachas];\r\n                            \r\n                            const selectTipo = () =>{\r\n                                return newTipoTachas.map(tamanio =>{\r\n                                    if(tamanio.select){\r\n                                        return{\r\n                                            ...tamanio,\r\n                                            tipo: tamanio.tipo.map(tipo=>{\r\n                                                \r\n                                                if(tipo.tipo === action.tipo){\r\n                                                    return{\r\n                                                        ...tipo,\r\n                                                        select: true\r\n                                                    }\r\n                                                }else{\r\n                                                    return{\r\n                                                        ...tipo,\r\n                                                        select: false\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            )\r\n                                        }\r\n                                    }else{\r\n                                        return{\r\n                                            ...tamanio\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            return {\r\n                                ...state,\r\n                                opciones:{\r\n                                    ...state.opciones,\r\n                                    tachas: selectTipo()\r\n                                    \r\n                                },\r\n                                respaldo: {\r\n                                    ...state.respaldo,\r\n                                    tipoTacha: action.tipo\r\n                                }\r\n                            }\r\n     case actionTypes.SET_MODELO:\r\n         console.log(state.opciones.modelo);\r\n         let newModelos = [...state.opciones.modelos];\r\n         const selectModelo = () => {\r\n             return newModelos.map(modelo =>{\r\n                 if(modelo.tipo === action.tipo){\r\n                    return{\r\n                        ...modelo,\r\n                        select: true\r\n                    }\r\n                 }else{\r\n                    return{\r\n                        ...modelo,\r\n                        select: false\r\n                    }\r\n                 }\r\n             })\r\n         }\r\n                            return{\r\n                                ...state,\r\n                                opciones:{\r\n                                    ...state.opciones,\r\n                                    modelos:selectModelo()\r\n                                    \r\n                                },\r\n                                respaldo: {\r\n                                    ...state.respaldo,\r\n                                    modelo: action.tipo\r\n                                }\r\n                            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n }\r\n\r\n export default reducer;"]},"metadata":{},"sourceType":"module"}