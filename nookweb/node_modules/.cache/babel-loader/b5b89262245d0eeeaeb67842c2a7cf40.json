{"ast":null,"code":"import * as actionTypes from './../actions/actionTypes';\nconst initialState = {\n  opciones: {\n    formas: [{\n      tipo: 'Rectangular',\n      precio: 900,\n      select: false\n    }, {\n      tipo: 'Capilla',\n      precio: 900,\n      select: false\n    }, {\n      tipo: 'Oval',\n      precio: 900,\n      select: false\n    }, {\n      tipo: 'Esquinas Redondas',\n      precio: 900,\n      select: false\n    }],\n    medidas: [{\n      altura: 1.00,\n      ancho: 1.20,\n      precio: 9000,\n      select: false\n    }, {\n      altura: 1.40,\n      ancho: 1.20,\n      precio: 9500,\n      select: false\n    }, {\n      altura: 1.60,\n      ancho: 1.20,\n      precio: 9900,\n      select: false\n    }, {\n      altura: 1.80,\n      ancho: 1.20,\n      precio: 10900,\n      select: false\n    }, {\n      altura: 2.00,\n      ancho: 1.20,\n      precio: 11900,\n      select: false\n    }, {\n      altura: 2.20,\n      ancho: 1.20,\n      precio: 12900,\n      select: false\n    }],\n    generosycolores: [{\n      tipo: 'Lino Suizo',\n      color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Lino Paris',\n      color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Lino Costa',\n      color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Pana Dresden',\n      color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Pana Portugal',\n      color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Ecocuero',\n      color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Tussor Rayado',\n      color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\n      select: false,\n      precio: 1000\n    }, {\n      tipo: 'Tussor Liso',\n      color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\n      select: false,\n      precio: 1000\n    }],\n    tachas: [{\n      tamanio: 'Tachas Grandes',\n      select: false,\n      tipo: [{\n        tipo: \"Óxido\",\n        select: false\n      }, {\n        tipo: \"Peltre\",\n        select: false\n      }, {\n        tipo: \"Plateado\",\n        select: false\n      }],\n      precio: 800\n    }, {\n      tamanio: 'Tachas Medianas',\n      select: false,\n      tipo: [{\n        tipo: \"Óxido\",\n        select: false\n      }, {\n        tipo: \"Peltre\",\n        select: false\n      }, {\n        tipo: \"Plateado\",\n        select: false\n      }],\n      precio: 500\n    }, {\n      tamanio: 'Sin Tachas',\n      tipo: [],\n      precio: 0,\n      select: false\n    }],\n    modelos: [{\n      tipo: 'Liso',\n      precio: 0,\n      select: false\n    }, {\n      tipo: 'Tacha Grande',\n      precio: 0,\n      select: false\n    }, {\n      tipo: 'Tacha Junta',\n      precio: 1000,\n      select: false\n    }, {\n      tipo: 'Doble Tacha',\n      precio: 900,\n      select: false\n    }, {\n      tipo: 'Botone',\n      precio: 1200,\n      select: false\n    }, {\n      tipo: 'Capitone',\n      precio: 5000,\n      select: false\n    }, {\n      tipo: 'Canelon',\n      precio: 8000,\n      select: false\n    }, {\n      tipo: 'Con Funda Lisa',\n      precio: 3250,\n      select: false\n    }]\n  },\n  respaldo: {\n    forma: '',\n    medida: {\n      ancho: '',\n      altura: ''\n    },\n    genero: '',\n    color: '',\n    tacha: '',\n    tipoTacha: '',\n    modelo: ''\n  },\n  precioRespaldo: 0\n}; // const newPrecio = (addPrice) => ({\n//         ...state.precioRespaldo, \n//          respaldoPrecio: state.precioRespaldo + addPrice\n//         });\n\nconst reducer = (state = initialState, action) => {\n  console.log(state.opciones);\n\n  switch (action.type) {\n    case actionTypes.SET_FORMA:\n      let newFormas = [...state.opciones.formas];\n\n      const selectFormas = () => newFormas.map(form => {\n        if (form.tipo === action.tipo) {\n          return { ...form,\n            select: true\n          };\n        } else {\n          return { ...form,\n            select: false\n          };\n        }\n      });\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          formas: selectFormas()\n        },\n        respaldo: { ...state.respaldo,\n          forma: action.tipo\n        }\n      };\n\n    case actionTypes.SET_MEDIDAS:\n      let newMedidas = [...state.opciones.medidas];\n\n      const selectMedidas = () => {\n        return newMedidas.map(medida => {\n          if (medida.altura === action.altura && medida.ancho === action.ancho) {\n            return { ...medida,\n              select: true\n            };\n          } else {\n            return { ...medida,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          medidas: selectMedidas()\n        },\n        respaldo: { ...state.respaldo,\n          medida: {\n            ancho: action.ancho,\n            altura: action.altura\n          }\n        }\n      };\n\n    case actionTypes.SET_GENEROYCOLOR:\n      let newGenerosyColores = [...state.opciones.generosycolores];\n\n      const selectGenerosyColores = () => {\n        return newGenerosyColores.map(genero => {\n          if (genero.tipo === action.tipo) {\n            return { ...genero,\n              select: true\n            };\n          } else {\n            return { ...genero,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          generosycolores: selectGenerosyColores()\n        },\n        respaldo: { ...state.respaldo,\n          genero: action.tipo\n        }\n      };\n\n    case actionTypes.SET_COLOR:\n      return { ...state,\n        respaldo: { ...state.respaldo,\n          color: action.color\n        }\n      };\n\n    case actionTypes.SET_TACHA:\n      let newTachas = [...state.opciones.tachas];\n\n      const selectTachas = () => {\n        return newTachas.map(tacha => {\n          if (tacha.tamanio === action.tamanio) {\n            return { ...tacha,\n              select: true\n            };\n          } else {\n            return { ...tacha,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          tachas: selectTachas()\n        },\n        respaldo: { ...state.respaldo,\n          tipoTacha: action.tamanio\n        }\n      };\n\n    case actionTypes.SET_TIPO_TACHA:\n      let newTipoTachas = [...state.opciones.tachas];\n\n      const selectTipo = () => {\n        return newTipoTachas.map(tamanio => {\n          if (tamanio.select) {\n            return { ...tamanio,\n              tipo: tamanio.tipo.map(tipo => {\n                if (tipo.tipo === action.tipo) {\n                  return { ...tipo,\n                    select: true\n                  };\n                } else {\n                  return { ...tipo,\n                    select: false\n                  };\n                }\n              })\n            };\n          } else {\n            return { ...tamanio\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          tachas: selectTipo()\n        },\n        respaldo: { ...state.respaldo,\n          tipoTacha: action.tipo\n        }\n      };\n\n    case actionTypes.SET_MODELO:\n      console.log(state.opciones.modelo);\n      let newModelos = [...state.opciones.modelos];\n\n      const selectModelo = () => {\n        return newModelos.map(modelo => {\n          if (modelo.tipo === action.tipo) {\n            return { ...modelo,\n              select: true\n            };\n          } else {\n            return { ...modelo,\n              select: false\n            };\n          }\n        });\n      };\n\n      return { ...state,\n        opciones: { ...state.opciones,\n          modelos: selectModelo()\n        },\n        respaldo: { ...state.respaldo,\n          modelo: action.tipo\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Juan/Desktop/paginanook/nookweb/src/store/reducers/respaldo.js"],"names":["actionTypes","initialState","opciones","formas","tipo","precio","select","medidas","altura","ancho","generosycolores","color","tachas","tamanio","modelos","respaldo","forma","medida","genero","tacha","tipoTacha","modelo","precioRespaldo","reducer","state","action","console","log","type","SET_FORMA","newFormas","selectFormas","map","form","SET_MEDIDAS","newMedidas","selectMedidas","SET_GENEROYCOLOR","newGenerosyColores","selectGenerosyColores","SET_COLOR","SET_TACHA","newTachas","selectTachas","SET_TIPO_TACHA","newTipoTachas","selectTipo","SET_MODELO","newModelos","selectModelo"],"mappings":"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","sourcesContent":["import * as actionTypes from './../actions/actionTypes';\r\n\r\nconst initialState={\r\n    opciones:{\r\n        formas:[\r\n            {\r\n                tipo: 'Rectangular',\r\n                precio: 900,\r\n                select: false\r\n            },\r\n            {\r\n                tipo: 'Capilla',\r\n                precio: 900,\r\n                select: false\r\n            },\r\n            {\r\n                tipo: 'Oval',\r\n                precio: 900,\r\n                select: false\r\n            },\r\n            {\r\n                tipo: 'Esquinas Redondas',\r\n                precio: 900,\r\n                select: false\r\n            },\r\n        ],\r\n   \r\n     medidas:[\r\n         {\r\n             altura: 1.00,\r\n             ancho: 1.20,\r\n             precio: 9000,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 1.40,\r\n             ancho: 1.20,\r\n             precio: 9500,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 1.60,\r\n             ancho: 1.20,\r\n             precio: 9900,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 1.80,\r\n             ancho: 1.20,\r\n             precio: 10900,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 2.00,\r\n             ancho: 1.20,\r\n             precio: 11900,\r\n             select: false\r\n          },\r\n          {\r\n             altura: 2.20,\r\n             ancho: 1.20,\r\n             precio: 12900,\r\n             select: false\r\n          }\r\n     ],\r\n     generosycolores:[\r\n         {\r\n             tipo: 'Lino Suizo',\r\n             color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Lino Paris',\r\n             color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Lino Costa',\r\n             color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Pana Dresden',\r\n             color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Pana Portugal',\r\n             color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Ecocuero',\r\n             color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Tussor Rayado',\r\n             color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n         {\r\n             tipo: 'Tussor Liso',\r\n             color: ['Rosa', 'Rojo Bermellon', 'Azul', 'Beige', 'Gris', 'Turquesa'],\r\n             select: false,\r\n             precio: 1000\r\n         },\r\n     ],\r\n     tachas:[\r\n            {\r\n             tamanio: 'Tachas Grandes',\r\n             select: false,\r\n             tipo:[\r\n                 {\r\n                     tipo: \"Óxido\",\r\n                     select: false\r\n                 },\r\n                 {\r\n                    tipo: \"Peltre\",\r\n                    select: false\r\n                },\r\n                {\r\n                    tipo: \"Plateado\",\r\n                    select: false\r\n                }\r\n             ],\r\n             precio: 800,\r\n         },\r\n         {\r\n             tamanio: 'Tachas Medianas',\r\n             select: false,\r\n             tipo: [\r\n                {\r\n                    tipo: \"Óxido\",\r\n                    select: false\r\n                },\r\n                {\r\n                   tipo: \"Peltre\",\r\n                   select: false\r\n               },\r\n               {\r\n                   tipo: \"Plateado\",\r\n                   select: false\r\n               }\r\n            ],\r\n             precio: 500\r\n         },\r\n         {\r\n             tamanio: 'Sin Tachas',\r\n             tipo: [],\r\n             precio: 0,\r\n             select: false\r\n         },\r\n     ],\r\n     modelos:[\r\n         {\r\n             tipo: 'Liso',\r\n             precio: 0,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Tacha Grande',\r\n             precio: 0,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Tacha Junta',\r\n             precio: 1000,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Doble Tacha',\r\n             precio: 900,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Botone',\r\n             precio: 1200,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Capitone',\r\n             precio: 5000,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Canelon',\r\n             precio: 8000,\r\n             select: false\r\n         },\r\n         {\r\n             tipo: 'Con Funda Lisa',\r\n             precio: 3250,\r\n             select: false\r\n         }\r\n     ]\r\n    },\r\n    respaldo:{\r\n        forma: '',\r\n        medida:{\r\n            ancho: '',\r\n            altura: ''\r\n        },\r\n        genero:'',\r\n        color: '',\r\n        tacha:'',\r\n        tipoTacha:'',\r\n        modelo:''\r\n    },\r\n    precioRespaldo: 0\r\n }\r\n\r\n// const newPrecio = (addPrice) => ({\r\n//         ...state.precioRespaldo, \r\n//          respaldoPrecio: state.precioRespaldo + addPrice\r\n//         });\r\n\r\n const reducer = (state=initialState, action) =>{\r\n    console.log(state.opciones);\r\n    switch (action.type) {\r\n        \r\n      case actionTypes.SET_FORMA:\r\n      \r\n      let newFormas =[...state.opciones.formas];\r\n      const selectFormas =() =>newFormas.map(form =>{\r\n              if(form.tipo === action.tipo){\r\n                  return {\r\n                    ...form,  \r\n                    select: true\r\n                }\r\n              }else{\r\n                return {\r\n                    ...form,  \r\n                    select: false\r\n                }\r\n              }\r\n          })\r\n \r\n            return{\r\n                ...state,\r\n                opciones:{\r\n                    ...state.opciones,\r\n                    formas: selectFormas()\r\n                },\r\n                respaldo: {\r\n                    ...state.respaldo,\r\n                    forma: action.tipo\r\n                }\r\n            }\r\n      case actionTypes.SET_MEDIDAS:\r\n\r\n          let newMedidas=[...state.opciones.medidas];\r\n\r\n          const selectMedidas = () =>{\r\n              return newMedidas.map(medida =>{\r\n                  if(medida.altura === action.altura && medida.ancho ===action.ancho){\r\n                    return {\r\n                        ...medida,\r\n                        select: true\r\n                    }\r\n                     \r\n                  }else{\r\n                    return {\r\n                        ...medida,\r\n                        select: false\r\n                    }\r\n                  }\r\n              })\r\n          }\r\n          \r\n                return{\r\n                    ...state,\r\n                    opciones:{\r\n                        ...state.opciones,\r\n                        medidas: selectMedidas()\r\n                        \r\n                    },\r\n                    respaldo: {\r\n                        ...state.respaldo,\r\n                        medida:{\r\n                            ancho: action.ancho,\r\n                            altura: action.altura\r\n                        }\r\n                    }\r\n                }\r\n     case actionTypes.SET_GENEROYCOLOR:\r\n         let newGenerosyColores =[...state.opciones.generosycolores];\r\n         const selectGenerosyColores = () =>{\r\n             return newGenerosyColores.map(genero =>{\r\n                 if(genero.tipo ===action.tipo){\r\n                     \r\n                     return {\r\n                        ...genero,\r\n                        select: true\r\n                    }\r\n                     \r\n                     \r\n                 }else{\r\n                    \r\n                    return{\r\n                        ...genero,\r\n                        select: false\r\n                    }\r\n                 }\r\n             });\r\n         }\r\n    \r\n                    return{\r\n                        ...state,\r\n                        opciones:{\r\n                            ...state.opciones,\r\n                            generosycolores:selectGenerosyColores()\r\n                            \r\n                        },\r\n                        respaldo:{\r\n                            ...state.respaldo,\r\n                            genero: action.tipo\r\n                        }\r\n                    }\r\n      case actionTypes.SET_COLOR:\r\n          return{\r\n              ...state,\r\n              respaldo:{\r\n                  ...state.respaldo,\r\n                  color: action.color\r\n              }\r\n          }\r\n      case actionTypes.SET_TACHA:\r\n          let newTachas=[...state.opciones.tachas];\r\n          \r\n          const selectTachas = () =>{\r\n             return newTachas.map(tacha =>{\r\n                  if(tacha.tamanio === action.tamanio){\r\n                      return{\r\n                        ...tacha,\r\n                        select: true\r\n                    }\r\n\r\n                  }else{\r\n                    return{\r\n                        ...tacha,\r\n                        select: false\r\n                    }\r\n                  }\r\n              })\r\n          }\r\n          \r\n                        return{\r\n                            ...state,\r\n                            opciones:{\r\n                                ...state.opciones,\r\n                                tachas:selectTachas()\r\n                                \r\n                            },\r\n                            respaldo: {\r\n                                ...state.respaldo,\r\n                                tipoTacha: action.tamanio\r\n                            }\r\n                        }\r\n      case actionTypes.SET_TIPO_TACHA:\r\n                            let newTipoTachas=[...state.opciones.tachas];\r\n                            \r\n                            const selectTipo = () =>{\r\n                                return newTipoTachas.map(tamanio =>{\r\n                                    if(tamanio.select){\r\n                                        return{\r\n                                            ...tamanio,\r\n                                            tipo: tamanio.tipo.map(tipo=>{\r\n                                                \r\n                                                if(tipo.tipo === action.tipo){\r\n                                                    return{\r\n                                                        ...tipo,\r\n                                                        select: true\r\n                                                    }\r\n                                                }else{\r\n                                                    return{\r\n                                                        ...tipo,\r\n                                                        select: false\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            )\r\n                                        }\r\n                                    }else{\r\n                                        return{\r\n                                            ...tamanio\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            return {\r\n                                ...state,\r\n                                opciones:{\r\n                                    ...state.opciones,\r\n                                    tachas: selectTipo()\r\n                                    \r\n                                },\r\n                                respaldo: {\r\n                                    ...state.respaldo,\r\n                                    tipoTacha: action.tipo\r\n                                }\r\n                            }\r\n     case actionTypes.SET_MODELO:\r\n         console.log(state.opciones.modelo);\r\n         let newModelos = [...state.opciones.modelos];\r\n         const selectModelo = () => {\r\n             return newModelos.map(modelo =>{\r\n                 if(modelo.tipo === action.tipo){\r\n                    return{\r\n                        ...modelo,\r\n                        select: true\r\n                    }\r\n                 }else{\r\n                    return{\r\n                        ...modelo,\r\n                        select: false\r\n                    }\r\n                 }\r\n             })\r\n         }\r\n                            return{\r\n                                ...state,\r\n                                opciones:{\r\n                                    ...state.opciones,\r\n                                    modelos:selectModelo()\r\n                                    \r\n                                },\r\n                                respaldo: {\r\n                                    ...state.respaldo,\r\n                                    modelo: action.tipo\r\n                                }\r\n                            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n }\r\n\r\n export default reducer;"]},"metadata":{},"sourceType":"module"}