{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan\\\\Desktop\\\\paginanook\\\\nookweb\\\\src\\\\components\\\\Respaldo\\\\OpcionesRespaldo\\\\GenerosYColores\\\\GenerosYColores.js\";\nimport React from \"react\";\nimport classes from \"./GenerosYColores.module.css\";\n\nconst GenerosYColores = props => {\n  const arrayClasses = [classes.item, classes.fill];\n  let form = null;\n  console.log(props.modelo);\n\n  if (props.modelo === 'Con Funda') {\n    // condicional para cuando el usuario eligio el modelo Con funda, ya que solo tiene opcion de elegir dos generos\n    form = props.generos.map((genero, i) => /*#__PURE__*/React.createElement(\"div\", {\n      className: props.generoSelected === genero.tipo ? arrayClasses.join(\" \") : arrayClasses[0],\n      key: genero.tipo,\n      onClick: () => props.selectGenero(genero.tipo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.tipo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, genero.tipo))).filter(genero => genero.tipo !== 'Tusor Liso' || 'Tusor Rayado');\n  } else {\n    form = props.generos.filter(genero => genero.tipo === 'Tusor Liso' || 'Tusor Rayado').map(genero => /*#__PURE__*/React.createElement(\"div\", {\n      className: props.generoSelected === genero.tipo ? arrayClasses.join(\" \") : arrayClasses[0],\n      key: genero.tipo,\n      onClick: () => props.selectGenero(genero.tipo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.tipo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }\n    }, genero.tipo)));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.GeneroYColor + ' page',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"Elija un g\\xE9nero\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.guideline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Tipo\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.opcionesFormas,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, form));\n};\n\nexport default GenerosYColores;","map":{"version":3,"sources":["C:/Users/Juan/Desktop/paginanook/nookweb/src/components/Respaldo/OpcionesRespaldo/GenerosYColores/GenerosYColores.js"],"names":["React","classes","GenerosYColores","props","arrayClasses","item","fill","form","console","log","modelo","generos","map","genero","i","generoSelected","tipo","join","selectGenero","filter","GeneroYColor","guideline","opcionesFormas"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,8BAApB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAMC,YAAY,GAAG,CAACH,OAAO,CAACI,IAAT,EAAeJ,OAAO,CAACK,IAAvB,CAArB;AACA,MAAIC,IAAI,GAAE,IAAV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,MAAlB;;AACF,MAAGP,KAAK,CAACO,MAAN,KAAiB,WAApB,EAAgC;AAAE;AAChCH,IAAAA,IAAI,GAAGJ,KAAK,CAACQ,OAAN,CAAcC,GAAd,CAAkB,CAACC,MAAD,EAASC,CAAT,kBACvB;AACE,MAAA,SAAS,EAAEX,KAAK,CAACY,cAAN,KAAyBF,MAAM,CAACG,IAAhC,GAAsCZ,YAAY,CAACa,IAAb,CAAkB,GAAlB,CAAtC,GAA+Db,YAAY,CAAC,CAAD,CADxF;AAEE,MAAA,GAAG,EAAES,MAAM,CAACG,IAFd;AAGE,MAAA,OAAO,EAAE,MAAMb,KAAK,CAACe,YAAN,CAAmBL,MAAM,CAACG,IAA1B,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAM,MAAA,SAAS,EAAEf,OAAO,CAACe,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCH,MAAM,CAACG,IAAvC,CALF,CADK,EAQJG,MARI,CAQGN,MAAM,IAAIA,MAAM,CAACG,IAAP,KAAgB,YAAhB,IAAgC,cAR7C,CAAP;AASD,GAVD,MAUK;AACHT,IAAAA,IAAI,GAACJ,KAAK,CAACQ,OAAN,CACJQ,MADI,CACGN,MAAM,IAAIA,MAAM,CAACG,IAAP,KAAgB,YAAhB,IAAgC,cAD7C,EAEJJ,GAFI,CAECC,MAAM,iBACV;AACA,MAAA,SAAS,EAAEV,KAAK,CAACY,cAAN,KAAyBF,MAAM,CAACG,IAAhC,GAAsCZ,YAAY,CAACa,IAAb,CAAkB,GAAlB,CAAtC,GAA+Db,YAAY,CAAC,CAAD,CADtF;AAEA,MAAA,GAAG,EAAES,MAAM,CAACG,IAFZ;AAGA,MAAA,OAAO,EAAE,MAAMb,KAAK,CAACe,YAAN,CAAmBL,MAAM,CAACG,IAA1B,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKA;AAAM,MAAA,SAAS,EAAEf,OAAO,CAACe,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCH,MAAM,CAACG,IAAvC,CALA,CAHG,CAAL;AAWD;;AACC,sBACE;AAAK,IAAA,SAAS,EAAEf,OAAO,CAACmB,YAAR,GAAsB,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAK,IAAA,SAAS,EAAEnB,OAAO,CAACoB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAFF,eAKE;AAAK,IAAA,SAAS,EAAEpB,OAAO,CAACqB,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCf,IAAzC,CALF,CADF;AASD,CApCD;;AAsCA,eAAeL,eAAf","sourcesContent":["import React from \"react\";\r\n\r\nimport classes from \"./GenerosYColores.module.css\";\r\n\r\nconst GenerosYColores = (props) => {\r\n  const arrayClasses = [classes.item, classes.fill];\r\n  let form =null\r\n  console.log(props.modelo)\r\nif(props.modelo === 'Con Funda'){ // condicional para cuando el usuario eligio el modelo Con funda, ya que solo tiene opcion de elegir dos generos\r\n  form = props.generos.map((genero, i) => (\r\n    <div\r\n      className={props.generoSelected === genero.tipo? arrayClasses.join(\" \") : arrayClasses[0]}\r\n      key={genero.tipo}\r\n      onClick={() => props.selectGenero(genero.tipo)}\r\n    >\r\n      <span className={classes.tipo}>{genero.tipo}</span>\r\n    </div>\r\n  )).filter(genero => genero.tipo !== 'Tusor Liso' || 'Tusor Rayado');\r\n}else{\r\n  form=props.generos\r\n  .filter(genero => genero.tipo === 'Tusor Liso' || 'Tusor Rayado')\r\n  .map( genero =>(\r\n    <div\r\n    className={props.generoSelected === genero.tipo? arrayClasses.join(\" \") : arrayClasses[0]}\r\n    key={genero.tipo}\r\n    onClick={() => props.selectGenero(genero.tipo)}\r\n  >\r\n    <span className={classes.tipo}>{genero.tipo}</span>\r\n  </div>)\r\n  )\r\n}\r\n  return (\r\n    <div className={classes.GeneroYColor+ ' page'}>\r\n      <h2>Elija un g√©nero</h2>\r\n      <div className={classes.guideline}>\r\n        <span>Tipo</span>\r\n      </div>\r\n      <div className={classes.opcionesFormas}>{form}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenerosYColores;\r\n"]},"metadata":{},"sourceType":"module"}